-- The C compiler identification is GNU 12.2.0
-- The CXX compiler identification is GNU 12.2.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: C:/Xilinx/Vitis/2024.1/gnu/aarch32/nt/gcc-arm-none-eabi/bin/arm-none-eabi-gcc.exe - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: C:/Xilinx/Vitis/2024.1/gnu/aarch32/nt/gcc-arm-none-eabi/bin/arm-none-eabi-g++.exe - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- The ASM compiler identification is GNU
-- Found assembler: C:/Xilinx/Vitis/2024.1/gnu/aarch32/nt/gcc-arm-none-eabi/bin/arm-none-eabi-gcc.exe
-- Configuring done
-- Generating done
-- Build files have been written to: C:/Git/GitHub/MCS/MC/MC_state_machine_xADC/V1/Vitis/platform/ps7_cortexa9_0/freertos_ps7_cortexa9_0/bsp/libsrc/build_configs/gen_bsp
-- Cache values
// BOARD
BOARD:STRING=picozed_7020_som

// Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ...
CMAKE_BUILD_TYPE:STRING=

// Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=C:/Program Files (x86)/bsp

// Size
CMAKE_SIZE:FILEPATH=arm-none-eabi-size

// Specs file path for using CMAKE toolchain files
CMAKE_SPECS_FILE:STRING=C:/Git/GitHub/MCS/MC/MC_state_machine_xADC/V1/Vitis/platform/ps7_cortexa9_0/freertos_ps7_cortexa9_0/bsp/Xilinx.spec

// The CMake toolchain file
CMAKE_TOOLCHAIN_FILE:FILEPATH=C:/Git/GitHub/MCS/MC/MC_state_machine_xADC/V1/Vitis/platform/ps7_cortexa9_0/freertos_ps7_cortexa9_0/bsp/cortexa9_toolchain.cmake

// Device Id
DEVICE_ID:STRING=7z020

// The directory containing a CMake configuration file for INTC.
INTC_DIR:PATH=INTC_DIR-NOTFOUND

// Number of slrs
NUMBER_OF_SLRS:STRING=0x1

// sub dir list
SUBDIR_LIST:STRING=ALL

// ASM FLAGS
TOOLCHAIN_ASM_FLAGS:STRING= -O2 -DSDT -mcpu=cortex-a9 -mfpu=vfpv3 -mfloat-abi=hard

// CXXFLAGS
TOOLCHAIN_CXX_FLAGS:STRING= -O2 -DSDT -mcpu=cortex-a9 -mfpu=vfpv3 -mfloat-abi=hard

// CFLAGS
TOOLCHAIN_C_FLAGS:STRING= -O2 -DSDT -mcpu=cortex-a9 -mfpu=vfpv3 -mfloat-abi=hard

// Flags used by compiler to generate dependency files
TOOLCHAIN_DEP_FLAGS:STRING= -MMD -MP

// Extra CFLAGS
TOOLCHAIN_EXTRA_C_FLAGS:STRING= -g -Wall -Wextra -fno-tree-loop-distribute-patterns

// Enable Interval Timer
XILTIMER_en_interval_timer:BOOL=OFF

// This parameter is used to select specific timer for sleep functionality
XILTIMER_sleep_timer:STRING=Default

// This parameter is used to select specific timer for tick functionality
XILTIMER_tick_timer:STRING=ps7_scutimer_0

// Yocto based embeddedsw FLOW
YOCTO:BOOL=OFF

// Set to 0 for no overflow checking. Set to 1 to include basic run time task stack checking.  Set to 2 to include more comprehensive run time task stack checking.
freertos_check_for_stack_overflow:STRING=2

// Set to 1 generate runtime stats for tasks.
freertos_generate_runtime_stats:STRING=0x0

// Set to true if the Idle task should yield if another idle priority task is able to run, or false if the idle task should always use its entire time slice unless it is preempted.
freertos_idle_yield:BOOL=ON

// The maximum interrupt priority from which interrupt safe FreeRTOS API calls can be made.
freertos_max_api_call_interrupt_priority:STRING=18

// The number of task priorities that will be available.  Priorities can be assigned from zero to (freertos_max_priorities - 1
freertos_max_priorities:STRING=8

// The maximum number of characters that can be in the name of a task.
freertos_max_task_name:STRING=10

// Set to true to include message buffer functionality, or false to exclude message buffer functionality.
freertos_message_buffer:BOOL=OFF

// The size of the stack allocated to the Idle task. Also used by standard demo and test tasks found in the main FreeRTOS download.
freertos_minimal_stack_size:STRING=200

// Sets the number of pointers each task has to store thread local values.
freertos_num_thread_local_storage_pointers:STRING=0x0

// The maximum number of queues that can be registered at any one time. Only registered queues can be viewed in the Eclipse/GDB kernel aware debugger plug-in.
freertos_queue_registry_size:STRING=10

// stdin peripheral
freertos_stdin:STRING=ps7_uart_0

// stdout peripheral
freertos_stdout:STRING=ps7_uart_0

// Set to true to include stream buffer functionality, or false to exclude stream buffer functionality.
freertos_stream_buffer:BOOL=OFF

// Set to true to allocate memory statically, or false to allocate memory dynamically.
freertos_support_static_allocation:BOOL=OFF

// Number of RTOS ticks per sec
freertos_tick_rate:STRING=100

// The number of commands the timer command queue can hold at any one time.
freertos_timer_command_queue_length:STRING=10

// Applicable only for R5. Selects the ttc module from which a counter will be used as the freertos tick source.
freertos_timer_select:STRING=psu_ttc_0

// Applicable only for R5. Selects the ttc counter number inside the selected ttc module to be used as the freertos tick source.
freertos_timer_select_counter:STRING=0x0

// The priority at which the software timer service/daemon task will execute.
freertos_timer_task_priority:STRING=configMAX_PRIORITIES-1

// The size of the stack allocated to the timer service/daemon task.
freertos_timer_task_stack_depth:STRING=configMINIMAL_STACK_SIZE

// Sets the amount of RAM reserved for use by FreeRTOS - used when tasks, queues, semaphores and event groups are created.
freertos_total_heap_size:STRING=65536

// Set to true to include counting semaphore functionality, or false to exclude recursive mutex functionality.
freertos_use_counting_semaphores:BOOL=ON

// Set true for kernel to call vApplicationDaemonTaskStartupHook on first iteration of RTOS daemon task. The application must provide an implementation of
vApplicationDaemonTaskStartupHook().
freertos_use_daemon_task_startup_hook:BOOL=OFF

// Defines configASSERT() to assist development and debugging.  The application can override the default implementation of vApplicationAssert( char *pcFile, uint32_t ulLine )
freertos_use_freertos_asserts:BOOL=ON

// Set to true to use mutex xSemaphoreGetMutexHolder API, or false to exclude it.
freertos_use_getmutex_holder:BOOL=ON

// Set to true for the kernel to call vApplicationIdleHook() on each iteration of the idle task.  The application must provide an implementation of vApplicationIdleHook().
freertos_use_idle_hook:BOOL=OFF

// Only used if a FreeRTOS memory manager (heap_n.c) is included in the project.  Set to true for the kernel to call vApplicationMallocFailedHookHook() if there is insufficient FreeRTOS heap available for a task, queue or semaphore to be created.  The application can override the default implementation of vApplicationMallocFailedHook().
freertos_use_malloc_failed_hook:BOOL=ON

// Set to true to include mutex functionality, or false to exclude mutex functionality.
freertos_use_mutexes:BOOL=ON

// When true each task will have its own Newlib reent structure.
freertos_use_newlib_reent:BOOL=OFF

// When true task selection will be faster at the cost of limiting the maximum number of unique priorities to 32.
freertos_use_port_optimized_task_selection:BOOL=ON

// The maximum interrupt priority from which interrupt safe FreeRTOS API calls can be made.
freertos_use_preemption:BOOL=ON

// Set to true to include queue set functionality.
freertos_use_queue_sets:BOOL=ON

// Set to true to include recursive mutex functionality, or false to exclude recursive mutex functionality.
freertos_use_recursive_mutexes:BOOL=ON

// Set to 1 to include the vTaskList() and vTaskGetRunTimeStats() functions, which format run-time data into human readable text.
freertos_use_stats_formatting_functions:BOOL=ON

// Set to 1 to create tasks without FPU context, set to 2 to have tasks with FPU context by default.
freertos_use_task_fpu_support:STRING=0x1

// Set to true to include direct to task notification functionality.
freertos_use_task_notifications:BOOL=ON

// Set to true for the kernel to call vApplicationTickHook() during each tick interrupt.
The application must provide an implementation of vApplicationTickHook().
freertos_use_tick_hook:BOOL=OFF

// Set to true to include software timer functionality, or false to exclude software timer functionality
freertos_use_timers:BOOL=ON

// When true equal priority ready tasks will share CPU time with a context switch on each tick interrupt.
freertos_use_timeslicing:BOOL=ON

// Set to true to include the legacy trace functionality, and a few other features.  traceMACROS are the preferred method of tracing now.
freertos_use_trace_facility:BOOL=ON

// Archiver
proc_archiver:STRING=arm-none-eabi-gcc-ar.exe

// Assembler
proc_assembler:STRING=arm-none-eabi-gcc

// Compiler
proc_compiler:STRING=arm-none-eabi-gcc.exe

// Compiler Flags
proc_compiler_flags:STRING= -O2 -DSDT -mcpu=cortex-a9 -mfpu=vfpv3 -mfloat-abi=hard;-c

// Extra Compiler Flags
proc_extra_compiler_flags:STRING= -g -Wall -Wextra -fno-tree-loop-distribute-patterns

// This option is not supported in the Unified Vitis IDE in this version. Change to the classic IDE if you want to use this option.
standalone_clocking:STRING=None

// This option is not supported in the Unified Vitis IDE in this version. Change to the classic IDE if you want to use this option
standalone_enable_sw_intrusive_profiling:STRING=None

// Unused option and deprecated
standalone_microblaze_exceptions:STRING=None

// Deprecated in favor of xiltimer
standalone_pmu_sleep_timer:STRING=None

// This option is not supported in the Unified Vitis IDE in this version. Change to the classic IDE if you want to use this option
standalone_profile_timer:STRING=None

// Deprecated in favor of xiltimer
standalone_sleep_timer:STRING=None

// Deprecated in favor of xiltimer
standalone_ttc_select_cntr:STRING=None

// This option is not supported in the Unified Vitis IDE in this version. Change to the classic IDE if you want to use this option.
standalone_xpm_support:STRING=None

// Not needed any more in Unified Vitis
standalone_zynqmp_fsbl_bsp:STRING=None

