/*
* The Baud Rate Prescaler Register (BRPR) and Bit Timing Register (BTR)
* are setup such that CAN baud rate equals 40Kbps, assuming that the
* the CAN clock is 24MHz. The user needs to modify these values based on
* the desired baud rate and the CAN clock frequency. For more information
* see the CAN 2.0A, CAN 2.0B, ISO 11898-1 specifications.
*/

#include "xparameters.h"
#include "xcanps.h"
#include "xil_exception.h"
#include "xil_printf.h"
#include "xinterrupt_wrap.h"


/* Maximum CAN frame length in word */
#define XCANPS_MAX_FRAME_SIZE_IN_WORDS (XCANPS_MAX_FRAME_SIZE / sizeof(u32))
#define FRAME_DATA_LENGTH	8 /* Frame Data field length */
#define TEST_MESSAGE_ID		2000// Message Id Constant.


/*
 * Timing parameters to be set in the Bit Timing Register (BTR).
 * These values are for a 40 Kbps baudrate assuming the CAN input clock
 * frequency is 24 MHz.
 */
#define TEST_BTR_SYNCJUMPWIDTH		3
#define TEST_BTR_SECOND_TIMESEGMENT	2
#define TEST_BTR_FIRST_TIMESEGMENT	15

/*
 * The Baud rate Prescalar value in the Baud Rate Prescaler Register needs to be set 
 based on the input clock  frequency to the CAN core and the desired CAN baud rate.
 * This value is for a 40 Kbps baudrate assuming the CAN input clock frequency is 24 MHz.
 */
#define TEST_BRPR_BAUD_PRESCALAR	29



static int CanPsIntrExample(XCanPs *CanInstPtr, UINTPTR BaseAddress);

static void Config(XCanPs *InstancePtr);
static void SendFrame(XCanPs *InstancePtr);
static void SendHandler(void *CallBackRef);
static void RecvHandler(void *CallBackRef);
static void ErrorHandler(void *CallBackRef, u32 ErrorMask);
static void EventHandler(void *CallBackRef, u32 Mask);

#ifndef TESTAPP_GEN
static XCanPs CanInstance;    /* Instance of the Can driver */
#endif

/*
 * Buffers to hold frames to send and receive. These are declared as global so
 * that they are not on the stack. These buffers need to be 32-bit aligned
 */
static u32 TxFrame[XCANPS_MAX_FRAME_SIZE_IN_WORDS];
static u32 RxFrame[XCANPS_MAX_FRAME_SIZE_IN_WORDS];

// Shared variables used to test the callbacks.
static volatile int LoopbackError;	/* Asynchronous error occurred */
static volatile int RecvDone;		/* Received a frame */
static volatile int SendDone;		/* Frame was sent successfully */

