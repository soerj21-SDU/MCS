#include "xparameters.h"
#include "xil_printf.h"
#include "includes/Jonas_CAN.h"
#include "platform.h"

#define CAN0_DEVICE_ID XPAR_XCANPS_0_DEVICE_ID
#define CAN1_DEVICE_ID XPAR_XCANPS_1_DEVICE_ID

#define XCANPS_MAX_FRAME_SIZE_IN_WORDS (XCANPS_MAX_FRAME_SIZE / sizeof(u32))
#define FRAME_DATA_LENGTH 1

#define TEST_MESSAGE_ID_CONST 15

#define CAN_SNIFFER 1 // Set to 1 to only write from CAN0, expecting a PC to sniff the data.

#define CAN0_base_address                     XPAR_XCANPS_0_BASEADDR


// Buffers to hold frames. Global to not be on stack. Must be 32-bit aligned.
static u32 TxFrame0[XCANPS_MAX_FRAME_SIZE_IN_WORDS];
static u32 RxFrame0[XCANPS_MAX_FRAME_SIZE_IN_WORDS];

static u32 TxFrame1[XCANPS_MAX_FRAME_SIZE_IN_WORDS];
static u32 RxFrame1[XCANPS_MAX_FRAME_SIZE_IN_WORDS];


int main() {

    init_platform();

    print("\n After init platform");

	#if CAN_SNIFFER==1
	int status;

    print("\n Before entering CAN init");

	status = can_init(1);
	if (status != XST_SUCCESS) {
		xil_printf("Initialization CAN0 failed.");
		while(1);
	}
    print("\n After CAN init");

	can_normal_mode(1);


    print("\n After entering normal mode");


	/// SEND FRAME CAN0
	// Create identifier and data length code values
	TxFrame0[0] = (u32)XCanPs_CreateIdValue((u32)TEST_MESSAGE_ID_CONST, 0, 0, 0, 0);
	TxFrame0[1] = (u32)XCanPs_CreateDlcValue((u32)FRAME_DATA_LENGTH);

	// Fill in known data to verify
	u8 *FramePtr  = (u8 *)(&TxFrame0[2]);
	for (int Index = 0; Index < FRAME_DATA_LENGTH; Index++) {
		*FramePtr++ = (u8)Index;
	}
    
    print("\n Just before send");


    while(1)
    {

	// Send the frame. This function returns XST_FAILURE if TX FIFO is full.
	status = can_send(1, TxFrame0);
	if (status != XST_SUCCESS) {
		xil_printf("Sending from CAN0 failed.");
		while(1);
	}


	xil_printf("Send function finished correctly.");
	xil_printf("Remember to confirm CAN data rate.");

    for(int i = 0; i < 10000000000; i++)
    {
    } //1 sec delay 1000000000

    }

	return 0;

	#else
	int status;

	status = can_init(CAN0_base_address);
	if (status != XST_SUCCESS) {
		xil_printf("Initialization CAN0 failed.");
		while(1);
	}

	status = can_init(CAN0_base_address);
	if (status != XST_SUCCESS) {
		xil_printf("Initialization CAN1 failed.");
		while(1);
	}

	can_loopback_mode(CAN0_base_address);
	can_loopback_mode(CAN0_base_address);

	/// SEND FRAME CAN0
	// Create identifier and data length code values
	TxFrame0[0] = (u32)XCanPs_CreateIdValue((u32)TEST_MESSAGE_ID_CONST, 0, 0, 0, 0);
	TxFrame0[1] = (u32)XCanPs_CreateDlcValue((u32)FRAME_DATA_LENGTH);

	// Fill in known data to verify
	u8 *FramePtr  = (u8 *)(&TxFrame0[2]);
	for (int Index = 0; Index < FRAME_DATA_LENGTH; Index++) {
		*FramePtr++ = (u8)Index;
	}

	// Send the frame. This function returns XST_FAILURE if TX FIFO is full.
	status = can_send(CAN0_base_address, TxFrame0);
	if (status != XST_SUCCESS) {
		xil_printf("Sending from CAN0 failed.");
		while(1);
	}

	/// RECEIVE FRAME CAN0
	// Receive a frame and verify contents. This function returns XST_FAILURE if RX FIFO is empty.
	do {
	status = can_receive(CAN0_base_address, RxFrame0);
	}
	while (status != XST_SUCCESS);

	if (RxFrame0[0] != (u32)XCanPs_CreateIdValue((u32)TEST_MESSAGE_ID_CONST, 0, 0, 0, 0)) {
		xil_printf("Loopback error 0.");
	}
	if ((RxFrame0[1] & ~XCANPS_DLCR_TIMESTAMP_MASK) != TxFrame0[1]) {
		xil_printf("Loopback error 0.");
	}

	FramePtr = (u8 *)(&RxFrame0[2]);
	for (int Index = 0; Index < FRAME_DATA_LENGTH; Index++) {
		if (*FramePtr++ != (u8)Index) {
			xil_printf("Loopback error 0.");
		}
	}

	/// SEND FRAME CAN1
	// Create identifier and data length code values
	TxFrame1[0] = (u32)XCanPs_CreateIdValue((u32)TEST_MESSAGE_ID_CONST, 0, 0, 0, 0);
	TxFrame1[1] = (u32)XCanPs_CreateDlcValue((u32)FRAME_DATA_LENGTH);

	// Fill in known data to verify
	u8 *FramePtr1  = (u8 *)(&TxFrame1[2]);
	for (int Index = 0; Index < FRAME_DATA_LENGTH; Index++) {
		*FramePtr1++ = (u8)Index;
	}

	// Send the frame. This function returns XST_FAILURE if TX FIFO is full.
	status = can_send(CAN0_base_address, TxFrame1);
	if (status != XST_SUCCESS) {
		xil_printf("Sending from CAN1 failed.");
		while(1);
	}

	/// RECEIVE FRAME CAN1
	// Receive a frame and verify contents. This function returns XST_FAILURE if RX FIFO is empty.
	do {
	status = can_receive(CAN0_base_address, RxFrame1);
	}
	while (status != XST_SUCCESS);

	if (RxFrame1[0] != (u32)XCanPs_CreateIdValue((u32)TEST_MESSAGE_ID_CONST, 0, 0, 0, 0)) {
		xil_printf("Loopback error 1.");
	}
	if ((RxFrame1[1] & ~XCANPS_DLCR_TIMESTAMP_MASK) != TxFrame1[1]) {
		xil_printf("Loopback error 1.");
	}

	FramePtr1 = (u8 *)(&RxFrame1[2]);
	for (int Index = 0; Index < FRAME_DATA_LENGTH; Index++) {
		if (*FramePtr1++ != (u8)Index) {
			xil_printf("Loopback error 1.");
		}
	}

	xil_printf("Loopback finished correctly.");
	xil_printf("Remember to confirm CAN data rate.");

	while(1);

	return 0;

	#endif
}
